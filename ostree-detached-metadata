#!/usr/bin/env python
#
# Print/add/remove detached metadata key
#
# Copyright 2015 Colin Walters <walters@verbum.org>
# Licensed under the new-BSD license (http://www.opensource.org/licenses/bsd-license.php)

import sys
from gi.repository import GLib, Gio, OSTree
import argparse

parser = argparse.ArgumentParser(prog="ostree-edit-detached")
parser.add_argument("--repo", help="Repo path",
                    action='store', required=True)
parser.add_argument("--ref", help="Branch or commit",
                    action='store', required=True)
parser.add_argument("--key", help="Key name",
                    action='store')
parser.add_argument("--set-string-file", help="Set the key to have the contents of filename",
                    action='store')
parser.add_argument("--delete", help="Remove the key",
                    action='store_true')

arg = parser.parse_args()

r = OSTree.Repo.new(Gio.File.new_for_path(arg.repo))
r.open(None)

[_,rev] = r.resolve_rev(arg.ref, False)

if arg.ref != rev:
    print "%s => %s" % (arg.ref, rev)
_,metadata = r.read_commit_detached_metadata(rev, None)
if metadata is None:
    metadata = metadata_copy = {}
else:
    metadata_copy = metadata.unpack()

arg = parser.parse_args()

if arg.key is None:
    keys = metadata.keys()
    if len(keys) == 0:
        print "No metadata."
    else:
        for k in keys:
            print k
elif arg.delete:
    del metadata_copy[arg.key]
    r.write_commit_detached_metadata(rev, GLib.Variant('a{sv}', metadata_copy), None)
    print "Deleted key: %s" % (arg.key, )
elif arg.set_string_file is not None:
    with open(arg.set_string_file) as f:
        data = f.read()
        metadata_copy[arg.key] = GLib.Variant('s', data)
    r.write_commit_detached_metadata(rev, GLib.Variant('a{sv}', metadata_copy), None)
    print "Wrote key: %s" % (arg.key, )
else:
    print metadata[arg.key]
